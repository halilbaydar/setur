{"ast":null,"code":"export function getToday() {\n  return new Date().toISOString().slice(0, 10);\n}\nexport function getWeekDay(date) {\n  if (date.length !== 10) {\n    __DEV__ && console.error('getWeekDay function\\'s parameter date format error!!!, please check your parameter');\n    return 0;\n  }\n\n  return new Date(date).getDay();\n}\nexport function getDaysInMonth(year, month) {\n  if (month <= 0 || month > 12) {\n    __DEV__ && console.error(\"getDaysInMonth error: month should be between 1 and 12, month: \" + month);\n    return 30;\n  }\n\n  var isLeapYear = year % 4 === 0;\n  var daysInFebruary = isLeapYear ? 29 : 28;\n  var daysInEachMonth = [31, daysInFebruary, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  var monthIndex = month >= 1 ? month - 1 : 0;\n  return daysInEachMonth[monthIndex];\n}","map":{"version":3,"sources":["E:/app/rn-starter/node_modules/react-native-common-date-picker/src/utils/dateFormat.js"],"names":["getToday","Date","toISOString","slice","getWeekDay","date","length","__DEV__","console","error","getDay","getDaysInMonth","year","month","isLeapYear","daysInFebruary","daysInEachMonth","monthIndex"],"mappings":"AAIA,OAAO,SAASA,QAAT,GAA4B;AAC/B,SAAO,IAAIC,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAkC,EAAlC,CAAP;AACH;AAYD,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAA0C;AAC7C,MAAIA,IAAI,CAACC,MAAL,KAAgB,EAApB,EAAwB;AACpBC,IAAAA,OAAO,IAAIC,OAAO,CAACC,KAAR,CAAc,oFAAd,CAAX;AACA,WAAO,CAAP;AACH;;AACD,SAAO,IAAIR,IAAJ,CAASI,IAAT,EAAeK,MAAf,EAAP;AACH;AAUD,OAAO,SAASC,cAAT,CAAwBC,IAAxB,EAAsCC,KAAtC,EAA6D;AAChE,MAAIA,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAG,EAA1B,EAA8B;AAC1BN,IAAAA,OAAO,IAAIC,OAAO,CAACC,KAAR,qEAAgFI,KAAhF,CAAX;AACA,WAAO,EAAP;AACH;;AACD,MAAMC,UAAU,GAAGF,IAAI,GAAG,CAAP,KAAa,CAAhC;AACA,MAAMG,cAAc,GAAGD,UAAU,GAAG,EAAH,GAAQ,EAAzC;AACA,MAAME,eAAe,GAAG,CAAC,EAAD,EAAKD,cAAL,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,EAAiD,EAAjD,EAAqD,EAArD,EAAyD,EAAzD,CAAxB;AACA,MAAME,UAAU,GAAGJ,KAAK,IAAI,CAAT,GAAcA,KAAK,GAAG,CAAtB,GAA2B,CAA9C;AACA,SAAOG,eAAe,CAACC,UAAD,CAAtB;AACH","sourcesContent":["/**\n * Get today like \"2020-06-02\".\n * @returns {string} Returns a string value that stands for today.\n */\nexport function getToday(): string {\n    return new Date().toISOString().slice(0, 10);\n}\n\n/**\n * Gets the week day for a date.\n * Why not use this way? Because this method of parsing is very inefficient with bad performance that takes lots of time to return the result.\n * \"\"\"\n *   const _date = new Date(Date.parse(date.replace(/-/g, '/')));\n *   return _date.getDay(); // 0 to 6\n * \"\"\"\n * @param date A date string such as '2020-05-20' or '2020/05/20'. Note that date string like '2020/5/20' is not permitted.\n * @returns {number} Returns the day of a date representing the week day from 0 to 6, 0 is Sunday, 1 is Monday, 2 is Tuesday, etc.\n */\nexport function getWeekDay(date: string): number {\n    if (date.length !== 10) {\n        __DEV__ && console.error('getWeekDay function\\'s parameter date format error!!!, please check your parameter');\n        return 0;\n    }\n    return new Date(date).getDay();\n}\n\n/**\n * Gets how many days in a month.\n * Note that the reason why we don't use \"new Date(year, month, 0).getDate()\" is that its performance looks like\n * very bad. So we take a seemingly stupid but efficient approach as follows\n * @param year A numeric value equal to the year\n * @param month A numeric value equal to the month. The value for January is 1, and other month values follow consecutively.\n * @returns {number} Returns the days in a month like 28, 31 and the like.\n */\nexport function getDaysInMonth(year: number, month: number): number {\n    if (month <= 0 || month > 12) {\n        __DEV__ && console.error(`getDaysInMonth error: month should be between 1 and 12, month: ${month}`);\n        return 30;\n    }\n    const isLeapYear = year % 4 === 0; // If year % 4 === 0, this year is leap year, otherwise common year.\n    const daysInFebruary = isLeapYear ? 29 : 28;\n    const daysInEachMonth = [31, daysInFebruary, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    const monthIndex = month >= 1 ? (month - 1) : 0;\n    return daysInEachMonth[monthIndex];\n}\n"]},"metadata":{},"sourceType":"module"}